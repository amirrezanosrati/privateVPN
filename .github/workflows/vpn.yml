name: WireGuard VPN with QR Code
on:
  workflow_dispatch:

jobs:
  wireguard-vpn:
    runs-on: ubuntu-latest
    steps:
    - name: Install WireGuard and QR tools
      run: |
        sudo apt-get update
        sudo apt-get install -y wireguard resolvconf qrencode

    - name: Generate WireGuard Keys
      run: |
        umask 077
        wg genkey | tee privatekey | wg pubkey > publickey
        echo "PRIVATE_KEY=$(cat privatekey)" >> $GITHUB_ENV
        echo "PUBLIC_KEY=$(cat publickey)" >> $GITHUB_ENV

    - name: Create WireGuard Config
      run: |
        sudo tee /etc/wireguard/wg0.conf > /dev/null << EOF
        [Interface]
        Address = 10.8.0.1/24
        ListenPort = 51820
        PrivateKey = ${{ env.PRIVATE_KEY }}
        PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
        PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE

        [Peer]
        PublicKey = ${{ env.PUBLIC_KEY }}
        AllowedIPs = 10.8.0.2/32
        EOF

    - name: Start WireGuard
      run: |
        sudo wg-quick up wg0
        sleep 3

    - name: Setup Ngrok UDP Tunnel
      run: |
        wget -q https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
        tar -xzf ngrok-v3-stable-linux-amd64.tgz
        chmod +x ngrok
        
        ./ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
        ./ngrok udp 51820 --log=stdout > ngrok.log 2>&1 &
        sleep 20

    - name: Get Connection Info
      run: |
        UDP_URL=$(curl -s http://localhost:4040/api/tunnels | grep -o 'udp://[^"]*' | head -1)
        if [ -n "$UDP_URL" ]; then
            SERVER_IP=$(echo "$UDP_URL" | cut -d':' -f2 | sed 's#//##')
            SERVER_PORT=$(echo "$UDP_URL" | cut -d':' -f3)
        else
            SERVER_IP="0.udp.ngrok.io"
            SERVER_PORT="51820"
        fi
        
        echo "SERVER_IP=$SERVER_IP" >> $GITHUB_ENV
        echo "SERVER_PORT=$SERVER_PORT" >> $GITHUB_ENV

    - name: Generate Client Config and QR Code
      run: |
        # ایجاد کانفیگ کلاینت
        cat > client.conf << EOF
[Interface]
PrivateKey = ${{ env.PRIVATE_KEY }}
Address = 10.8.0.2/24
DNS = 1.1.1.1, 8.8.8.8

[Peer]
PublicKey = ${{ env.PUBLIC_KEY }}
Endpoint = ${{ env.SERVER_IP }}:${{ env.SERVER_PORT }}
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 25
EOF

        # ایجاد QR Code و نمایش در log
        echo "=========================================="
        echo "🎯 WIREGUARD VPN - SCAN QR CODE"
        echo "=========================================="
        echo "🌐 Server: ${{ env.SERVER_IP }}"
        echo "🔌 Port: ${{ env.SERVER_PORT }}"
        echo ""
        echo "📲 Scan this QR code with WireGuard app:"
        echo ""
        qrencode -t ANSIUTF8 < client.conf
        echo ""
        echo "📋 Or use this config manually:"
        echo "=========================================="
        cat client.conf
        echo "=========================================="
        
        # همچنین ایجاد فایل QR برای دانلود
        qrencode -o qr-code.png -s 10 < client.conf

    - name: Upload QR Code and Config (v4)
      uses: actions/upload-artifact@v4
      with:
        name: wireguard-config
        path: |
          client.conf
          qr-code.png

    - name: Display Direct Download Link
      run: |
        echo "📥 Download config files from:"
        echo "https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
        echo ""
        echo "💡 After workflow completes, go to Artifacts section"

    - name: Keep alive
      run: |
        echo "🟢 WireGuard VPN is running..."
        echo "⭐ QR code is displayed above ↑"
        echo ""
        echo "📱 How to connect:"
        echo "1. Scan the QR code with WireGuard app"
        echo "2. Or download config from Artifacts"
        echo "3. Import client.conf manually"
        echo ""
        while true; do
            echo "✅ VPN Active - $(date +'%H:%M:%S')"
            sleep 60
        done
